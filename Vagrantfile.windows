# -*- mode: ruby -*-
# vi: set ft=ruby :
# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

$my_install = <<SCRIPT
sudo apt install build-essential git -y
sudo apt install postgresql postgresql-server-dev-9.3 python3-dev libxml2-dev libxslt-dev postgresql-server-dev-9.3 -y
sudo apt install libffi-dev python3.4-venv -y

cd $HOME
pyvenv-3.4 .venv34
. .venv34/bin/activate

cd ~/files/srw.zesar/
pip install Babel
pip install bcrypt
pip install WebOb
pip install pyramid
pip install gunicorn

pip install -r requirements.txt
python setup.py develop

cd ~/files/soapfish-0.6.dev0
pip install -r requirements.txt
python setup.py develop

cp /home/vagrant/files/database.sql /tmp
chmod 644 /tmp/database.sql
sudo su - postgres -c '/usr/bin/psql -Upostgres < /tmp/database.sql'
rm -rf /tmp/database.sql

cd ~/files
zesar-dbinit production.ini

#without create user goes wrong
pip install passlib --upgrade

#changeme
zesar-create-user production.ini --username=srw --password=secret --is-srw

cat > /home/vagrant/run.sh <<'ENDOFMESSAGE'
cd $HOME
#pyvenv-3.4 .venv34
. .venv34/bin/activate
gunicorn --paste ~/files/production.ini
ENDOFMESSAGE

SCRIPT


$my_install_ubu_16 = <<SCRIPT
sudo apt update
sudo apt install build-essential git -y
sudo apt-get install postgresql postgresql-server-dev-9.5 python3-dev libxml2-dev libxslt-dev postgresql-server-dev-9.5 -y
sudo apt-get install libffi-dev python3.5-venv -y

cd $HOME
pyvenv-3.5 .venv35
. .venv35/bin/activate

cd ~/files/srw.zesar/

pip install pip --upgrade
pip install wheel
pip install Babel
pip install bcrypt
pip install WebOb
pip install pyramid
pip install gunicorn

pip install -r requirements.txt
python setup.py develop

cd ~/files/soapfish-0.6.dev0
pip install -r requirements.txt
python setup.py develop

cp ~/files/database.sql /tmp
chmod 644 /tmp/database.sql
sudo su - postgres -c '/usr/bin/psql -Upostgres < /tmp/database.sql'
rm -rf /tmp/database.sql

cd ~/files
zesar-dbinit production.ini

#without create user goes wrong
pip install passlib --upgrade

zesar-create-user production.ini --username=srw --password=secret --is-srw

cat > ~/run.sh <<'ENDOFMESSAGE'
cd $HOME
#pyvenv-3.5 .venv35
. .venv35/bin/activate
gunicorn --paste ~/files/production.ini

ENDOFMESSAGE

SCRIPT

$my_install_c73 = <<SCRIPT
sudo ifup eth1 &>/dev/null
sudo yum install perl -y
sudo yum install epel-release -y
sudo yum install vim-enhanced -y

sudo yum install -y python-devel glibc-devel zlib-devel xz-devel libxml2-devel libgpg-error-devel libgcrypt-devel libxslt-devel libffi-devel postgresql-devel python34-devel popt-devel rpm-devel keyutils-libs-devel pcre-devel libsepol-devel libselinux-devel libverto-devel libcom_err-devel krb5-devel openssl-devel git

sudo yum install postgresql-server -y

sudo postgresql-setup initdb
sudo perl -pi -e 's#127.0.0.1.*?ident#127.0.0.1/32\t\tmd5#g' /var/lib/pgsql/data/pg_hba.conf
sudo perl -pi -e 's#::1/128.*?ident#::1/128\t\tmd5#g' /var/lib/pgsql/data/pg_hba.conf
sudo systemctl start postgresql
sudo systemctl restart postgresql
sudo systemctl enable postgresql

cp /home/vagrant/files/database.sql /tmp
chmod 644 /tmp/database.sql
sudo su - postgres -c '/usr/bin/psql -Upostgres < /tmp/database.sql'
rm -rf /tmp/database.sql

sudo yum install -y python34-pip.noarch python34-setuptool python34 python34-devel
sudo yum install -y gcc rpm-devel

sudo pip3.4 install virtualenv
virtualenv .venv34
. .venv34/bin/activate

cd ~/files/srw.zesar/
pip install Babel
pip install bcrypt
pip install WebOb
pip install pyramid
pip install gunicorn

pip install -r requirements.txt
python setup.py develop

cd ~/files/soapfish-0.6.dev0
pip install -r requirements.txt
python setup.py develop

cd ~/files
zesar-dbinit production.ini

#without create user goes wrong
pip install passlib --upgrade

#changeme
zesar-create-user production.ini --username=srw --password=secret --is-srw

cat > /home/vagrant/run.sh <<'ENDOFMESSAGE'
cd $HOME
. .venv34/bin/activate
gunicorn --paste ~/files/production.ini
ENDOFMESSAGE

cd ~/files/srw.zesar-client
pip install -r requirements.txt
python setup.py develop

echo "provision done!!!"

SCRIPT

$my_install_c73_client = <<SCRIPT

sudo yum install perl -y
sudo yum install epel-release -y
sudo yum install vim-enhanced -y

sudo yum install -y python-devel glibc-devel zlib-devel xz-devel libxml2-devel libgpg-error-devel libgcrypt-devel libxslt-devel libffi-devel postgresql-devel python34-devel popt-devel rpm-devel keyutils-libs-devel pcre-devel libsepol-devel libselinux-devel libverto-devel libcom_err-devel krb5-devel openssl-devel git

sudo yum install -y python34-pip.noarch python34-setuptool python34 python34-devel
sudo yum install -y gcc rpm-devel

sudo pip3.4 install virtualenv
virtualenv .venv34
. .venv34/bin/activate

pip install Babel
pip install bcrypt
pip install WebOb
pip install pyramid
pip install gunicorn

cd ~/files/soapfish-0.6.dev0
pip install -r requirements.txt
python setup.py develop

cd ~/files
#
#without create user goes wrong
pip install passlib --upgrade

#zesar-client

cd $HOME
. .venv34/bin/activate

cd ~/files/srw.zesar-client
pip install -r requirements.txt
python setup.py develop

echo "provision done!!!"

SCRIPT



Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

	config.vm.define :ubu1 do |ubu1|
		ubu1.vm.box = "ubuntu/trusty64"
		ubu1.vm.hostname = 'ubu1-14'
		ubu1.vm.network   "private_network", ip: "192.168.192.51"


		ubu1.vm.provider "virtualbox" do |v|
			v.gui = true
			v.memory = 1024
			v.cpus = 2
			#v.customize ["modifyvm", :id, "--nic2", "nat", "--nat-network2", "zesar"]
			#v.customize ["modifyvm", :id, "--nic2", "natnetwork", "--nat-network2", "zesar"]
		end

		ubu1.vm.synced_folder "files", "/home/vagrant/files", disabled: false, type: "rsync"
		ubu1.vm.synced_folder ".", "/vagrant", disabled: true
        ubu1.vm.provision "shell", inline: $my_install, privileged: false
    end

    config.vm.define :ubu2 do |ubu2|
        ubu2.vm.box = "ubuntu/xenial64"
        ubu2.vm.hostname = 'ubu2-16'
        ubu2.vm.network  "private_network", ip: "192.168.192.52"
		#,virtualbox__intnet: "zesar"

		ubu2.vm.provider "virtualbox" do |v|
			v.gui = true
			v.memory = 1024
			v.cpus = 2
		end

		ubu2.vm.synced_folder "files", "/home/ubuntu/files", disabled: false, type: "rsync"
		ubu2.vm.synced_folder ".", "/vagrant", disabled: true
        ubu2.vm.provision "shell", inline: $my_install_ubu_16, privileged: false
    end
	config.vm.define :c73 do |c73|
		c73.vm.box = "centos/7"
		c73.vm.hostname = 'c73-01'

		c73.vm.network  "private_network", ip: "192.168.192.53"

		c73.vm.provider "virtualbox" do |v|
			v.gui = true
			v.memory = 1024
			v.cpus = 2
			#v.customize ["modifyvm", :id, "--nic2", "natnetwork", "--nat-network2", "zesar"]
		end

		c73.vm.synced_folder "files", "/home/vagrant/files", disabled: false, type: "rsync"
		c73.vm.synced_folder ".", "/vagrant", disabled: true
		c73.vm.provision "shell", inline: $my_install_c73, privileged: false
	end
	config.vm.define :c73_client do |c73_client|
		c73_client.vm.box = "centos/7"
		c73_client.vm.hostname = 'c73-client'

		c73_client.vm.network  "private_network", ip: "192.168.192.54"

		c73_client.vm.provider "virtualbox" do |v|
			v.gui = true
			v.memory = 1024
			v.cpus = 2
			#v.customize ["modifyvm", :id, "--nic2", "natnetwork", "--nat-network2", "zesar"]
		end

		c73_client.vm.synced_folder "files", "/home/vagrant/files", disabled: false, type: "rsync"
		c73_client.vm.synced_folder ".", "/vagrant", disabled: true
		c73_client.vm.provision "shell", inline: $my_install_c73_client, privileged: false
	end
end


